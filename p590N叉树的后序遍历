/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

//递归
class Solution {
    List<Integer> list;
    public List<Integer> postorder(Node root) {
        list = new LinkedList();
        dfs(root);
        if(root!=null){
            list.add(root.val);
        }
        return list;
    }
    public void dfs(Node root){
        if(root == null) return;
        for(Node temp:root.children){
            dfs(temp);
            list.add(temp.val);
        }
    }
}

//迭代
class Solution {
    
    public List<Integer> postorder(Node root) {
        List<Integer> list= new LinkedList();
        Stack<Node> stack = new Stack<>();
        if(root!=null){
            stack.push(root);
        }
        while(!stack.isEmpty()){
            Node temp = stack.peek();
            if(temp==null){
                stack.pop();
                list.add(stack.peek().val);
                stack.pop();
                continue;
            }
            stack.push(null);
            int size = temp.children.size();
            for(int i=size-1;i>=0;i--){
                if(temp.children.get(i)!=null){
                    stack.push(temp.children.get(i));
                }
            }
        }
        return list;
    }
}
